// js/ui.js

// This module handles UI updates and interactions.
// It reads from the state module and updates the DOM via the elements module.
// It does NOT directly manipulate the DOM or call UI rendering functions.

import { elements } from './dom.js'; // Import elements object
import * as state from './state.js'; // UI reads from state
import { getInputElementForContext } from './state.js'; // Import the helper function
import { originalNoteTextBeforeRecording } from './voice.js'; // Import original text holder
import * as config from './config.js'; // Import config for keys
import { escapeHtml, formatFileSize, debounce } from './utils.js'; // Import utility functions, including debounce
import { marked } from 'https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js'; // Import marked for lexer
import { markedRenderer } from './config.js'; // Import the custom renderer from config.js

// Module-level variable to store parsed H1 sections for the current note
let _currentNoteH1Sections = [];

// No direct imports of api.js here to break the cycle.
// Event listeners will import api functions dynamically when needed.

/**
 * Waits for GraphViewer to be available and then processes diagrams.
 * Polls for a limited number of attempts.
 * @param {number} [maxAttempts=30] - Maximum number of times to check (increased to 30).
 * @param {number} [delay=100] - Delay between checks in milliseconds.
 */
function waitForGraphViewerAndProcess(maxAttempts = 30, delay = 100) { // Increased maxAttempts
    let attempts = 0;

    function checkAndProcess() {
        attempts++;
        if (typeof GraphViewer !== 'undefined' && typeof GraphViewer.processElements === 'function') {
            console.log(`[DEBUG] GraphViewer found after ${attempts} attempt(s). Calling processElements().`);
            try {
                GraphViewer.processElements();
            } catch (e) {
                console.error("Error in GraphViewer.processElements():", e);
            }
        } else if (attempts < maxAttempts) {
            // console.log(`[DEBUG] GraphViewer not ready, attempt ${attempts}. Retrying in ${delay}ms...`);
            setTimeout(checkAndProcess, delay);
        } else {
            console.warn(`[WARN] GraphViewer did not become available after ${maxAttempts} attempts.`);
        }
    }

    checkAndProcess(); // Start the check
}


/**
 * Processes an HTML string to make headings collapsible.
 * Wraps headings (h1-h6) and their subsequent content until the next
 * heading of the same or higher level into collapsible sections.
 * @param {string} htmlString - The raw HTML string generated by marked.js.
 * @returns {DocumentFragment} - A DOM fragment with collapsible sections.
 */
function makeHeadingsCollapsible(htmlString) {
    const template = document.createElement('template');
    // Wrap the raw HTML in a single root element to ensure proper parsing of adjacent nodes
    template.innerHTML = `<div>${htmlString.trim()}</div>`;
    const wrapperDiv = template.content.firstChild; // Get the wrapper div

    if (!wrapperDiv) {
        // If htmlString was empty or invalid, return an empty fragment
        return document.createDocumentFragment();
    }

    const nodes = Array.from(wrapperDiv.childNodes);
    const resultFragment = document.createDocumentFragment();
    let currentContentDiv = null; // Keep track of the content div for the current heading

    nodes.forEach(node => {
        const isHeading = node.nodeName && node.nodeName.match(/^H[1-6]$/);

        if (isHeading) {
            // Create the heading element
            const headingElement = node.cloneNode(true); // Clone the original heading
            headingElement.classList.add('collapsible-heading');
            headingElement.style.cursor = 'pointer';
            // Add a unique, deterministic ID for TOC linking
            const level = parseInt(node.nodeName.substring(1), 10);
            const headingText = node.textContent || `heading-${Date.now()}`;
            const slug = headingText.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
            // Use level and slug, remove random part
            const headingId = `toc-heading-level-${level}-${slug}`;
            headingElement.id = headingId;

            const toggleIcon = document.createElement('i');
            toggleIcon.classList.add('fas', 'fa-chevron-down', 'collapsible-toggle', 'mr-2', 'transition-transform', 'duration-200', 'inline-block');
            headingElement.insertBefore(toggleIcon, headingElement.firstChild);

            // Create the content div for this heading
            const contentDiv = document.createElement('div');
            contentDiv.classList.add('collapsible-content'); // Keep this class for collapse functionality
            const sectionId = `collapse-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
            contentDiv.id = sectionId;
            headingElement.dataset.target = `#${sectionId}`; // Link heading to content div

            // Append heading and content div directly to the fragment (flat structure)
            resultFragment.appendChild(headingElement);
            resultFragment.appendChild(contentDiv);

            // Set this new content div as the target for subsequent non-heading nodes
            currentContentDiv = contentDiv;

        } else {
            // Append non-heading nodes
            if (currentContentDiv) {
                // Append to the content div of the most recent heading
                currentContentDiv.appendChild(node.cloneNode(true));
            } else {
                // If before the first heading, append directly to the fragment
                resultFragment.appendChild(node.cloneNode(true));
            }
        }
    });

    return resultFragment;
}


// --- Render Functions (Read State, Update DOM) ---

/**
 * Renders the current status message in the status bar.
 */
export function renderStatus() {
    if (elements.statusBar) {
        elements.statusBar.textContent = `Status: ${state.statusMessage}`;
        if (state.isErrorStatus) {
            elements.statusBar.classList.add('text-red-500');
            elements.statusBar.classList.remove('text-gray-700'); // Assuming a default non-error color
        } else {
            elements.statusBar.classList.remove('text-red-500');
            elements.statusBar.classList.add('text-gray-700'); // Assuming a default non-error color
        }
    } else {
        console.warn("Status bar element not found for status update.");
    }
}

/**
 * Updates the loading state of UI elements.
 * Disables global actions based on `state.isLoading`.
 * Disables chat-specific inputs based on `state.processingChatId`.
 */
export function updateLoadingState() {
    const isGloballyLoading = state.isLoading; // For non-chat operations
    const isCurrentChatProcessing = state.currentChatId !== null && state.currentChatId === state.processingChatId;

    // --- Disable/Modify Chat-Specific Inputs if *Current Chat* is Processing ---
    if (elements.messageInput) elements.messageInput.disabled = isCurrentChatProcessing;
    if (elements.sendButton) {
        const sendButtonIcon = elements.sendButton.querySelector('i'); // Find the icon
        // Find the text node within the button (assuming it's directly after the icon or the last text node)
        let buttonTextNode = null;
        for (const node of elements.sendButton.childNodes) {
            // Find the last text node that isn't just whitespace
            if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim()) {
                buttonTextNode = node;
            }
        }
        // Fallback: If no text node found, maybe create one? For now, log error if needed.
        if (!buttonTextNode) {
            // console.warn("Could not find text node within send button to update.");
        }

        if (isCurrentChatProcessing) {
            // Change to Stop button
            elements.sendButton.disabled = false; // Keep button enabled to allow stopping
            elements.sendButton.title = "Stop Generation";
            elements.sendButton.classList.add('stop-button'); // Add class for styling
            if (sendButtonIcon) {
                sendButtonIcon.classList.remove('fa-paper-plane');
                sendButtonIcon.classList.add('fa-stop');
            }
            if (buttonTextNode) {
                buttonTextNode.nodeValue = ' Stop'; // Update text content (add space for padding)
            }
        } else {
            // Change back to Send button
            elements.sendButton.disabled = isGloballyLoading; // Disable only if globally loading, not just processing
            elements.sendButton.title = "Send Message";
            elements.sendButton.classList.remove('stop-button'); // Remove class
            if (sendButtonIcon) {
                sendButtonIcon.classList.remove('fa-stop');
                sendButtonIcon.classList.add('fa-paper-plane');
            }
            if (buttonTextNode) {
                buttonTextNode.nodeValue = ' Send'; // Restore original text content (add space for padding)
            }
        }
    }
    if (elements.modelSelector) elements.modelSelector.disabled = isCurrentChatProcessing || isGloballyLoading; // Disable if processing OR globally loading
    if (elements.micButton) elements.micButton.disabled = isCurrentChatProcessing || isGloballyLoading;
    if (elements.cleanupTranscriptButton) elements.cleanupTranscriptButton.disabled = isCurrentChatProcessing || isGloballyLoading;
    if (elements.fileUploadSessionLabel) elements.fileUploadSessionLabel.classList.toggle('disabled', isCurrentChatProcessing || isGloballyLoading);
 
    if (elements.newChatButton) elements.newChatButton.disabled = isGloballyLoading;
    if (elements.saveChatNameButton) elements.saveChatNameButton.disabled = isGloballyLoading;
    if (elements.currentChatNameInput) elements.currentChatNameInput.disabled = isGloballyLoading;
    if (elements.newNoteButton) elements.newNoteButton.disabled = isGloballyLoading;
    if (elements.saveNoteNameButton) elements.saveNoteNameButton.disabled = isGloballyLoading;
    if (elements.currentNoteNameInput) elements.currentNoteNameInput.disabled = isGloballyLoading;
    if (elements.loadCalendarButton) elements.loadCalendarButton.disabled = isGloballyLoading;
    if (elements.manageFilesButton) elements.manageFilesButton.disabled = isGloballyLoading;
    if (elements.fetchUrlButton) elements.fetchUrlButton.disabled = isGloballyLoading;
    if (elements.saveSummaryButton) elements.saveSummaryButton.disabled = isGloballyLoading;
    if (elements.settingsButton) elements.settingsButton.disabled = isGloballyLoading;
    if (elements.fileUploadModalInput) elements.fileUploadModalInput.disabled = isGloballyLoading;
    if (elements.fileUploadModalLabel) elements.fileUploadModalLabel.classList.toggle('disabled', isGloballyLoading);
    if (elements.addUrlModalButton) elements.addUrlModalButton.disabled = isGloballyLoading;
    if (elements.editNoteButton) elements.editNoteButton.disabled = isGloballyLoading;
    if (elements.viewNoteButton) elements.viewNoteButton.disabled = isGloballyLoading;
    if (elements.markdownTipsButton) elements.markdownTipsButton.disabled = isGloballyLoading;
    if (elements.micButtonNotes) elements.micButtonNotes.disabled = isGloballyLoading;
    if (elements.cleanupTranscriptButtonNotes) elements.cleanupTranscriptButtonNotes.disabled = isGloballyLoading;
    if (elements.longRecButtonNotes) elements.longRecButtonNotes.disabled = isGloballyLoading;
 
    document.querySelectorAll('.list-item').forEach(item => {
        if (isGloballyLoading) {
            item.classList.add('pointer-events-none', 'opacity-50');
        } else {
            item.classList.remove('pointer-events-none', 'opacity-50');
        }
    });
 
    elements.bodyElement?.classList.toggle('loading', isGloballyLoading);
    updateAttachButtonState();
}

/**
 * Renders the chat history from the state into the chatbox.
 */
export function renderChatHistory() {
    if (!elements.chatbox) {
        console.error("Chatbox element not found for rendering history.");
        return;
    }

    elements.chatbox.innerHTML = ''; // Clear current messages

    if (state.chatHistory.length === 0) {
        // Add a placeholder message if history is empty
        addMessageToDom({ // Pass object for consistency
            role: 'system',
            content: state.isLoading ? 'Loading chat history...' : 'This chat is empty. Start typing!',
            isError: false,
            attachments: [] // System messages typically don't have attachments
        });
    } else {
        state.chatHistory.forEach(msg => {
            // Pass the entire message object to addMessageToDom
            // This object should include role, content, isError, and attachments
            addMessageToDom(msg);
        });
    }

    // Auto-scroll to the bottom after rendering
    elements.chatbox.scrollTop = elements.chatbox.scrollHeight;
}

/**
 * Adds a single message to the chatbox DOM.
 * @param {object} messageObject - The message object.
 *   Expected properties: role, content, isError (optional), attachments (optional array), rawContent (optional for copy).
 * @returns {HTMLElement|null} The message element that was created.
 */
function addMessageToDom(messageObject) {
     if (!elements.chatbox) {
        console.error("Chatbox element not found.");
        return null;
    }

    // Destructure properties from the messageObject
    const { role, content, isError = false, attachments = [], rawContent: messageRawContent } = messageObject;

    const messageElement = document.createElement('div');
    // Add base classes, role-specific class, and flex for stacking attachments and content
    messageElement.classList.add('message', `${role}-msg`, 'p-3', 'mb-2', 'rounded-lg', 'whitespace-pre-wrap', 'relative', 'flex', 'flex-col');

    // Store raw content for copying (should be just the text part)
    const textToCopy = messageRawContent || (typeof content === 'string' ? content : "Complex content");
    messageElement.dataset.rawContent = textToCopy;


    // --- Render Attachments (if any) ---
    if (attachments && attachments.length > 0) {
        const attachmentsContainer = document.createElement('div');
        attachmentsContainer.classList.add('message-attachments-container', 'mb-2', 'flex', 'flex-wrap', 'gap-2'); // Styles for layout

        attachments.forEach(attachment => {
            if (attachment && attachment.filename) { // Ensure filename exists
                const attachmentElement = document.createElement('div');
                attachmentElement.classList.add(
                    'message-attachment-tag', 'inline-flex', 'items-center', 'text-xs', 'font-medium',
                    'px-2', 'py-0.5', 'rounded-full', 'bg-gray-100', 'text-gray-700',
                    'dark:bg-gray-600', 'dark:text-gray-200' // Example dark mode styling
                );
                attachmentElement.title = `Attached: ${escapeHtml(attachment.filename)}`;

                let iconClass = 'fa-file'; // Default icon
                // Determine icon based on attachment.type or attachment.mimetype
                if (attachment.type === 'session') {
                    iconClass = 'fa-paperclip';
                } else if (attachment.mimetype && attachment.mimetype.startsWith('image/')) {
                    iconClass = 'fa-file-image';
                } else if (attachment.mimetype === 'application/pdf') {
                    iconClass = 'fa-file-pdf';
                } else if (attachment.type === 'summary') { // Assuming 'type' is passed in attachment object
                    iconClass = 'fa-file-alt';
                } else if (attachment.type === 'full') {
                    iconClass = 'fa-file-invoice'; // Example, choose appropriate
                }
                // Add more specific icons as needed

                const iconElement = document.createElement('i');
                iconElement.className = `fas ${iconClass} mr-1.5`;

                const nameSpan = document.createElement('span');
                nameSpan.textContent = escapeHtml(attachment.filename);

                attachmentElement.appendChild(iconElement);
                attachmentElement.appendChild(nameSpan);
                attachmentsContainer.appendChild(attachmentElement);
            }
        });
        messageElement.appendChild(attachmentsContainer); // Add attachments before message content
    }
    // --- END: Render Attachments ---


    if (isError) {
        messageElement.classList.add('bg-red-100', 'text-red-800', 'border', 'border-red-400', 'dark:bg-red-900', 'dark:text-red-300');
        const errorContentDiv = document.createElement('div'); // Create a div for content
        errorContentDiv.innerHTML = `<strong>Error:</strong> ${escapeHtml(content)}`;
        messageElement.appendChild(errorContentDiv);
    } else {
         const messageContentDiv = document.createElement('div'); // Create a div for main content
         if (typeof marked !== 'undefined') {
             let rawHtml = marked.parse(content || ''); // Ensure content is not null
             const tempContainer = document.createElement('div');
             tempContainer.innerHTML = rawHtml;
             const codeBlocks = tempContainer.querySelectorAll('pre > code.language-xml, pre > code.language-drawio');
             const replacements = [];
             codeBlocks.forEach((codeBlock) => {
                 const parentPre = codeBlock.parentElement;
                 const xmlContent = codeBlock.textContent || '';
                 if (xmlContent.includes('<mxfile') && xmlContent.includes('</mxfile>')) {
                     const graphDiv = document.createElement('div');
                     graphDiv.className = 'mxgraph';
                     graphDiv.setAttribute('style', 'max-width: 100%; border: 1px solid transparent;');
                     graphDiv.setAttribute('data-mxgraph', JSON.stringify({
                         highlight: '#0000ff', nav: true, resize: true, toolbar: 'zoom layers lightbox', xml: xmlContent
                     }));
                     replacements.push({ oldNode: parentPre, newNode: graphDiv });
                 }
             });
             replacements.forEach(rep => {
                 if (rep.oldNode && rep.oldNode.parentNode) {
                     rep.oldNode.parentNode.replaceChild(rep.newNode, rep.oldNode);
                 }
             });
             rawHtml = tempContainer.innerHTML;
             const collapsibleFragment = makeHeadingsCollapsible(rawHtml);
             messageContentDiv.appendChild(collapsibleFragment);
             setTimeout(() => { waitForGraphViewerAndProcess(); }, 50);
         } else {
             messageContentDiv.textContent = content || ''; // Fallback, ensure content is not null
         }
         messageElement.appendChild(messageContentDiv); // Append the content div

        // Apply role-specific styling
        if (role === 'user') {
            messageElement.classList.add('bg-blue-100', 'self-end', 'dark:bg-blue-800');
        } else if (role === 'assistant') {
            messageElement.classList.add('bg-gray-200', 'self-start', 'dark:bg-gray-700');
        } else if (role === 'system') {
             messageElement.classList.add('bg-yellow-100', 'text-yellow-800', 'self-center', 'text-center', 'italic', 'dark:bg-yellow-700', 'dark:text-yellow-200');
        }

        // Add copy button only for user and assistant messages (not system or error)
        if ((role === 'user' || role === 'assistant') && !isError) {
            const copyButton = document.createElement('button');
            copyButton.classList.add('copy-message-button');
            copyButton.title = 'Copy raw text';
            copyButton.innerHTML = '<i class="far fa-copy"></i>';
            // Position copy button absolutely within the messageElement (which is relative)
            copyButton.style.position = 'absolute';
            copyButton.style.top = '0.25rem'; // Adjust as needed
            copyButton.style.right = '0.25rem'; // Adjust as needed
            messageElement.appendChild(copyButton);
        }
    }
    elements.chatbox.appendChild(messageElement);
    return messageElement;
}


/**
 * Renders the list of saved chats from the state in the sidebar.
 */
export function renderSavedChats() {
    const { savedChatsList, currentChatNameInput, currentChatIdDisplay } = elements;
    if (!savedChatsList) return;

    savedChatsList.innerHTML = ''; // Clear current list

    const chats = state.savedChats; // Read from state

    if (!chats || chats.length === 0) {
        savedChatsList.innerHTML = '<p class="text-rz-sidebar-text opacity-75 text-xs p-1">No saved chats yet.</p>';
        // Reset current chat display if no chats exist and one was selected
        if (state.currentChatId !== null) {
             if (currentChatNameInput) currentChatNameInput.value = '';
             if (currentChatIdDisplay) currentChatIdDisplay.textContent = 'ID: -';
             // State is already cleared by API/event listener
        }
        return;
    }

    // Sort chats by last_updated_at descending
    const sortedChats = chats.sort((a, b) => new Date(b.last_updated_at) - new Date(a.last_updated_at));

    sortedChats.forEach(chat => createChatItem(chat)); // Use helper

    // Update highlighting after rendering
    updateActiveChatListItem();
}

/**
 * Helper to create chat list item DOM element.
 * @param {Object} chat - The chat object { id, name, last_updated_at }.
 * @returns {HTMLElement} The created div element.
 */
function createChatItem(chat) {
    const { savedChatsList } = elements;
    if (!savedChatsList) return;

    const listItem = document.createElement('div');
    // Use 'active' class for selection as per CORRECT HTML
    listItem.classList.add('list-item', 'chat-list-item', 'p-2', 'border-rz-sidebar-border', 'cursor-pointer', 'hover:bg-rz-sidebar-hover'); // Removed flex, items-center, truncate, flex-grow, p-1
    listItem.dataset.chatId = chat.id;

    // Container for name and delete button (flex row)
    // Use 'name-container' class as per CORRECT HTML
    const nameDeleteContainer = document.createElement('div');
    nameDeleteContainer.classList.add('name-container'); // Use specific class

    const nameSpan = document.createElement('span');
    // Use only 'filename' class as per CORRECT HTML - color handled by CSS
    // Remove truncate and flex-grow as they conflict with list-item's column flex
    nameSpan.classList.add('filename'); // Use specific class
    nameSpan.textContent = chat.name || `Chat ${chat.id}`;
    nameSpan.title = chat.name || `Chat ${chat.id}`; // Add title for tooltip

    // Add delete button
    // Use only 'delete-btn' class as per CORRECT HTML - color handled by CSS
    const deleteButton = document.createElement('button');
    deleteButton.classList.add('delete-btn', 'text-rz-sidebar-text'); // Use specific class
    deleteButton.innerHTML = '<i class="fas fa-trash-alt fa-xs"></i>'; // Use fa-xs as per CORRECT HTML
    deleteButton.title = `Delete "${chat.name || `Chat ${chat.id}`}"`;

    nameDeleteContainer.appendChild(nameSpan);
    nameDeleteContainer.appendChild(deleteButton); // Append delete button

    // Add timestamp div
    // Use 'div' and specific classes as per CORRECT HTML - color handled by CSS
    const timestampDiv = document.createElement('div');
    // Default color is text-rz-tab-background-text (greyish) based on provided HTML
    timestampDiv.classList.add('text-xs', 'mt-0.5', 'text-rz-toolbar-field-text'); // Use specific classes and mt-0.5 - color handled by CSS
    try {
        const date = new Date(chat.last_updated_at);
        // Format date nicely, e.g., "Oct 26, 10:30 AM" or "Yesterday, 3:15 PM"
        const now = new Date();
        const yesterday = new Date(now);
        yesterday.setDate(now.getDate() - 1);

        let formattedDate;
        if (date.toDateString() === now.toDateString()) {
            formattedDate = `Today, ${date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}`;
        } else if (date.toDateString() === yesterday.toDateString()) {
            formattedDate = `Yesterday, ${date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}`;
        } else {
            formattedDate = date.toLocaleDateString([], { month: 'short', day: 'numeric' }) + ', ' + date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });
        }
        // Prepend "Last updated: " as per CORRECT HTML
        timestampDiv.textContent = `Last updated: ${formattedDate}`;
    } catch (e) {
        console.error("Error formatting date:", chat.last_updated_at, e);
        timestampDiv.textContent = 'Last updated: Invalid Date';
    }


    listItem.appendChild(nameDeleteContainer); // Append the container
    listItem.appendChild(timestampDiv); // Append the timestamp div

    savedChatsList.appendChild(listItem);
}


/** Updates the highlighting for the currently active chat list item based on state. */
export function updateActiveChatListItem() {
    const { savedChatsList } = elements;
    if (!savedChatsList) return;

    savedChatsList.querySelectorAll('.chat-list-item').forEach(item => {
        const chatId = parseInt(item.dataset.chatId);
        // Find the timestamp div (it has text-xs class)
        const timestampDiv = item.querySelector('.text-xs');

        // Use 'active' class as per CORRECT HTML
        if (chatId === state.currentChatId) { // Read from state
            item.classList.add('active'); // Use 'active'
            item.classList.remove('active-selection'); // Remove old class

            // When active, timestamp should be gold (text-rz-sidebar-text)
            if (timestampDiv) {
                timestampDiv.classList.add('text-rz-sidebar-text', 'active-timestamp');
                timestampDiv.classList.remove('text-rz-tab-background-text');
            }
            // Trash can icon should also change color when selected
            const deleteButton = item.querySelector('.delete-btn');
            if (deleteButton) {
                deleteButton.classList.add('active-trash');
            }
            // Scroll the active item into view if it's not already visible
            item.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        } else {
            item.classList.remove('active'); // Use 'active'
            item.classList.remove('active-selection'); // Remove old class

            // When inactive, timestamp should be greyish (text-rz-tab-background-text)
            if (timestampDiv) {
                timestampDiv.classList.remove('text-rz-sidebar-text', 'active-timestamp');
                timestampDiv.classList.add('text-rz-tab-background-text');
            }
            // Trash can icon should revert to default color when not selected
            const deleteButton = item.querySelector('.delete-btn');
            if (deleteButton) {
                deleteButton.classList.remove('active-trash');
            }
        }
    });
}

/**
 * Renders the current chat's name and ID from the state.
 */
export function renderCurrentChatDetails() {
    const { currentChatNameInput, currentChatIdDisplay, modelSelector } = elements;
    // Add null checks for individual elements
    if (currentChatNameInput) currentChatNameInput.value = state.currentChatName || ''; // Read from state
    if (currentChatIdDisplay) currentChatIdDisplay.textContent = state.currentChatId !== null ? `ID: ${state.currentChatId}` : 'ID: -'; // Read from state
    if (modelSelector) modelSelector.value = state.currentChatModel || modelSelector.options[0]?.value || ''; // Read from state
}

/** Adds/Removes a processing indicator (e.g., spinner) to chat list items. */
export function updateChatListProcessingIndicator() {
    const { savedChatsList } = elements;
    if (!savedChatsList) return;

    savedChatsList.querySelectorAll('.chat-list-item').forEach(item => {
        const chatId = parseInt(item.dataset.chatId);
        const nameContainer = item.querySelector('.name-container'); // Find the container for name/delete
        let spinner = item.querySelector('.processing-spinner'); // Check if spinner exists

        if (chatId === state.processingChatId) {
            // Add spinner if it doesn't exist
            if (!spinner && nameContainer) {
                spinner = document.createElement('span');
                spinner.classList.add('processing-spinner', 'ml-2'); // Add margin-left
                spinner.innerHTML = '<i class="fas fa-spinner fa-spin fa-xs text-rz-sidebar-text"></i>'; // Spinner icon
                // Insert spinner after the name span within the name container
                const nameSpan = nameContainer.querySelector('.filename');
                if (nameSpan) {
                    nameSpan.insertAdjacentElement('afterend', spinner);
                } else {
                    nameContainer.appendChild(spinner); // Fallback append
                }
            }
            item.classList.add('processing'); // Add class for potential styling
        } else {
            // Remove spinner if it exists
            if (spinner) {
                spinner.remove();
            }
            item.classList.remove('processing'); // Remove class
        }
    });
}

/**
 * Renders the list of saved notes from the state in the sidebar.
 */
export function renderSavedNotes() {
    const { savedNotesList, currentNoteNameInput, currentNoteIdDisplay } = elements;
    if (!savedNotesList) return;

    savedNotesList.innerHTML = ''; // Clear current list

    const notes = state.savedNotes; // Read from state

    if (!notes || notes.length === 0) {
        savedNotesList.innerHTML = '<p class="text-rz-sidebar-text opacity-75 text-xs p-1">No saved notes yet.</p>';
         // Reset current note display if no notes exist and one was selected
        if (state.currentNoteId !== null) {
             if (currentNoteNameInput) currentNoteNameInput.value = '';
             if (currentNoteIdDisplay) currentNoteIdDisplay.textContent = 'ID: -';
             // State is already cleared by API/event listener
        }
        return;
    }

    // Sort notes by last_saved_at descending
    const sortedNotes = notes.sort((a, b) => new Date(b.last_saved_at) - new Date(a.last_saved_at));

    sortedNotes.forEach(note => createNoteItem(note)); // Use helper

    // Update highlighting after rendering
    updateActiveNoteListItem();
}

/**
 * Helper to create note list item DOM element.
 * @param {Object} note - The note object { id, name, last_saved_at }.
 * @returns {HTMLElement} The created div element.
 */
function createNoteItem(note) {
    const { savedNotesList } = elements;
    if (!savedNotesList) return;

    const listItem = document.createElement('div');
    // Note items use 'active' class for selection as per provided HTML
    listItem.classList.add('list-item', 'note-list-item', 'p-2', 'border-rz-sidebar-border', 'cursor-pointer', 'hover:bg-rz-sidebar-hover'); // Removed flex, items-center, truncate, flex-grow, p-1
    listItem.dataset.noteId = note.id;

    // Container for name and delete button (flex row)
    // Use 'name-container' class as per provided HTML
    const nameDeleteContainer = document.createElement('div');
    nameDeleteContainer.classList.add('name-container'); // Use specific class

    const nameSpan = document.createElement('span');
    // Use only 'filename' class as per provided HTML - color handled by CSS
    // Remove truncate and flex-grow as they conflict with list-item's column flex
    nameSpan.classList.add('filename'); // Use specific class
    nameSpan.textContent = note.name || `Note ${note.id}`;
    nameSpan.title = note.name || `Note ${note.id}`; // Add title for tooltip

    // Add delete button
    // Use only 'delete-btn' class as per provided HTML - color handled by CSS
    const deleteButton = document.createElement('button');
    deleteButton.classList.add('delete-btn', 'text-rz-sidebar-text'); // Use specific class
    deleteButton.innerHTML = '<i class="fas fa-trash-alt fa-xs"></i>'; // Use fa-xs as per provided HTML
    deleteButton.title = `Delete "${note.name || `Note ${note.id}`}"`;

    nameDeleteContainer.appendChild(nameSpan);
    nameDeleteContainer.appendChild(deleteButton); // Append delete button

    // Add timestamp div
    // Use 'div' and specific classes as per provided HTML - color handled by CSS
    const timestampDiv = document.createElement('div');
    // Default color is text-rz-tab-background-text (greyish) based on provided HTML
    timestampDiv.classList.add('text-xs', 'mt-0.5', 'text-rz-toolbar-field-text'); // Use specific classes and mt-0.5 - color handled by CSS
    try {
        const date = new Date(note.last_saved_at); // Use uploaded_at for files
        // Format date nicely, e.g., "Oct 26, 10:30 AM" or "Yesterday, 3:15 PM"
        const now = new Date();
        const yesterday = new Date(now);
        yesterday.setDate(now.getDate() - 1);

        let formattedDate;
        if (date.toDateString() === now.toDateString()) {
            formattedDate = `Today, ${date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}`;
        } else if (date.toDateString() === yesterday.toDateString()) {
            formattedDate = `Yesterday, ${date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}`;
        } else {
            formattedDate = date.toLocaleDateString([], { month: 'short', day: 'numeric' }) + ', ' + date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });
        }
        // Prepend "Last saved: " as per provided HTML
        timestampDiv.textContent = `Last saved: ${formattedDate}`;
    } catch (e) {
        console.error("Error formatting date:", note.last_saved_at, e);
        timestampDiv.textContent = 'Last saved: Invalid Date';
    }

    listItem.appendChild(nameDeleteContainer); // Append the container
    listItem.appendChild(timestampDiv); // Append the timestamp div

    savedNotesList.appendChild(listItem);
}


/** Updates the highlighting for the currently active note list item based on state. */
export function updateActiveNoteListItem() {
    const { savedNotesList } = elements;
    if (!savedNotesList) return;

    savedNotesList.querySelectorAll('.note-list-item').forEach(item => {
        const noteId = parseInt(item.dataset.noteId);
        // Find the timestamp div (it has text-xs class)
        const timestampDiv = item.querySelector('.text-xs');

        // Use 'active' class as per provided HTML
        if (noteId === state.currentNoteId) { // Read from state
            item.classList.add('active'); // Use 'active'
            item.classList.remove('active-selection'); // Remove old class

            // When active, timestamp should be gold (text-rz-sidebar-text)
            if (timestampDiv) {
                timestampDiv.classList.add('text-rz-sidebar-text', 'active-timestamp');
                timestampDiv.classList.remove('text-rz-tab-background-text');
            }
             // Trash can icon should also change color when selected
            const deleteButton = item.querySelector('.delete-btn');
            if (deleteButton) {
                deleteButton.classList.add('active-trash');
            }
            // Scroll the active item into view if it's not already visible
            item.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        } else {
            item.classList.remove('active'); // Use 'active'
            item.classList.remove('active-selection'); // Remove old class

            // When inactive, timestamp should be greyish (text-rz-tab-background-text)
            if (timestampDiv) {
                timestampDiv.classList.remove('text-rz-sidebar-text', 'active-timestamp');
                timestampDiv.classList.add('text-rz-tab-background-text');
            }
            // Trash can icon should revert to default color when not selected
            const deleteButton = item.querySelector('.delete-btn');
            if (deleteButton) {
                deleteButton.classList.remove('active-trash');
            }
        }
    });
}

/**
 * Renders the current note's name and ID from the state.
 */
export function renderCurrentNoteDetails() {
    const { currentNoteNameInput, currentNoteIdDisplay } = elements;
    // Add null checks for individual elements
    if (currentNoteNameInput) currentNoteNameInput.value = state.currentNoteName || ''; // Read from state
    if (currentNoteIdDisplay) currentNoteIdDisplay.textContent = state.currentNoteId !== null ? `ID: ${state.currentNoteId}` : 'ID: -'; // Read from state
}

/**
 * Renders the current note's content from the state into the textarea and preview.
 */
export function renderNoteContent() {
    const { notesTextarea, notesPreview } = elements;
    // Add null checks for individual elements
    if (notesTextarea) {
        notesTextarea.value = state.noteContent || ''; // Read from state
        notesTextarea.placeholder = state.isLoading ? "Loading note..." : "Start typing your markdown notes here...";
        notesTextarea.disabled = state.isLoading || state.currentNoteId === null; // Disable if loading or no note loaded
        autoResizeTextarea(notesTextarea);
    }


    if (notesPreview) {
        updateNotesPreview();
    }
}


/**
 * Renders the list of uploaded files from the state in the plugins sidebar and manage files modal.
 */
export function renderUploadedFiles() {
    const { uploadedFilesList, manageFilesList } = elements;
    if (!uploadedFilesList || !manageFilesList) return;

    uploadedFilesList.innerHTML = '';
    manageFilesList.innerHTML = '';

    const files = state.uploadedFiles;

    if (!files || files.length === 0) {
        uploadedFilesList.innerHTML = `<p class="text-rz-sidebar-text opacity-75 text-xs p-1">No files uploaded yet.</p>`;
        manageFilesList.innerHTML = `<p class="text-gray-500 text-xs p-1">No files uploaded yet.</p>`;
        return;
    }

    files.forEach(file => {
        const isSidebarSelected = state.sidebarSelectedFiles.some(sf => sf.id === file.id);
        createSidebarFileItem(file, isSidebarSelected);
        createModalFileItem(file);
    });

    renderAttachedAndSessionFiles();
    updateAttachButtonState();
}

/**
 * Creates a DOM element for a file item in the sidebar list.
 * @param {Object} file - The file object { id, filename, mimetype, filesize, has_summary }.
 * @param {boolean} isSelected - Whether the file is currently selected in the sidebar.
 * @returns {HTMLElement} The created div element.
 */
function createSidebarFileItem(file, isSelected) {
    const { uploadedFilesList } = elements;
    if (!uploadedFilesList) return;

    const itemDiv = document.createElement('div');
    itemDiv.classList.add('list-item', 'file-list-item', 'p-2', 'border-rz-sidebar-border', 'cursor-pointer', 'hover:bg-rz-sidebar-hover');
    itemDiv.dataset.fileId = file.id;
    itemDiv.dataset.filename = file.filename;
    itemDiv.dataset.hasSummary = file.has_summary;
    if (isSelected) {
        itemDiv.classList.add('active');
    }


    const nameContainer = document.createElement('div');
    nameContainer.classList.add('name-container');

    const nameSpan = document.createElement('span');
    nameSpan.classList.add('filename');
    nameSpan.textContent = file.filename;
    nameSpan.title = file.filename;

    nameContainer.appendChild(nameSpan);

    const timestampDiv = document.createElement('div');
    timestampDiv.classList.add('text-xs', 'mt-0.5', 'text-rz-toolbar-field-text');
    try {
        const date = new Date(file.uploaded_at);
        const now = new Date();
        const yesterday = new Date(now);
        yesterday.setDate(now.getDate() - 1);

        let formattedDate;
        if (date.toDateString() === now.toDateString()) {
            formattedDate = `Today, ${date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}`;
        } else if (date.toDateString() === yesterday.toDateString()) {
            formattedDate = `Yesterday, ${date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}`;
        } else {
            formattedDate = date.toLocaleDateString([], { month: 'short', day: 'numeric' }) + ', ' + date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });
        }
        timestampDiv.textContent = `Uploaded: ${formattedDate}`;
    } catch (e) {
        console.error("Error formatting date:", file.uploaded_at, e);
        timestampDiv.textContent = 'Uploaded: Invalid Date';
    }


    itemDiv.appendChild(nameContainer);
    itemDiv.appendChild(timestampDiv);

    uploadedFilesList.appendChild(itemDiv);
}

/**
 * Updates the highlighting for selected file list items in the sidebar based on state.
 * Multiple files can be selected.
 */
export function updateSelectedFileListItemStyling() {
    const { uploadedFilesList } = elements;
    if (!uploadedFilesList) return;

    uploadedFilesList.querySelectorAll('.file-list-item').forEach(item => {
        const fileId = parseInt(item.dataset.fileId);
        if (isNaN(fileId)) return;

        const isSelected = state.sidebarSelectedFiles.some(sf => sf.id === fileId);

        if (isSelected) {
            item.classList.add('active');
        } else {
            item.classList.remove('active');
        }
    });
}

/**
 * Updates the enabled/disabled state of the Attach Full and Attach Summary buttons
 * based on the state of files selected in the sidebar.
 */
export function updateAttachButtonState() {
    const { attachFullButton, attachSummaryButton } = elements;
    if (!attachFullButton || !attachSummaryButton) return;

    const selectedCount = state.sidebarSelectedFiles.length;
    console.log(`[DEBUG] updateAttachButtonState: selectedCount=${selectedCount}, isLoading=${state.isLoading}`);
    console.log(`[DEBUG] updateAttachButtonState: state.sidebarSelectedFiles=`, JSON.parse(JSON.stringify(state.sidebarSelectedFiles)));


    attachFullButton.disabled = state.isLoading || selectedCount === 0;
    attachSummaryButton.disabled = state.isLoading || selectedCount === 0;
}


/**
 * Creates a DOM element for a file item in the Manage Files modal list.
 * @param {Object} file - The file object { id, filename, mimetype, filesize, has_summary, uploaded_at }.
 */
function createModalFileItem(file) {
    const { manageFilesList } = elements;
     if (!manageFilesList) return;

    const itemDiv = document.createElement('div');
    itemDiv.classList.add('file-list-item', 'grid', 'grid-cols-12', 'gap-2', 'items-center', 'p-2', 'border-b', 'border-gray-200', 'last:border-b-0', 'text-sm');
    itemDiv.dataset.fileId = file.id;
    itemDiv.dataset.filename = file.filename;
    itemDiv.dataset.hasSummary = file.has_summary;

    const nameCol = document.createElement('div');
    nameCol.classList.add('col-span-7', 'text-sm', 'text-gray-800', 'truncate');
    nameCol.textContent = file.filename;
    nameCol.title = file.filename;

    const sizeCol = document.createElement('div');
    sizeCol.classList.add('col-span-2', 'text-xs', 'text-gray-500');
    sizeCol.textContent = formatFileSize(file.filesize);

    const actionsCol = document.createElement('div');
    actionsCol.classList.add('col-span-3', 'flex', 'gap-1', 'justify-end');

    const summaryButton = document.createElement('button');
    summaryButton.classList.add('btn', 'btn-outline', 'btn-xs', 'p-1');
    summaryButton.innerHTML = '<i class="fas fa-list-alt"></i>';
    summaryButton.title = file.has_summary ? 'View/Edit Summary' : 'Generate Summary';

    const deleteButton = document.createElement('button');
    deleteButton.classList.add('btn', 'btn-outline', 'btn-xs', 'p-1', 'text-red-500', 'hover:text-red-700');
    deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
    deleteButton.title = 'Delete File';

    actionsCol.appendChild(summaryButton);
    actionsCol.appendChild(deleteButton);
    itemDiv.appendChild(nameCol);
    itemDiv.appendChild(sizeCol);
    itemDiv.appendChild(actionsCol);
    manageFilesList.appendChild(itemDiv);
}

/**
 * Renders the content of the summary modal based on state.
 */
export function renderSummaryModalContent() {
    const { summaryModalFilename, summaryTextarea, saveSummaryButton, summaryStatus } = elements;
    if (!summaryModalFilename || !summaryTextarea || !saveSummaryButton || !summaryStatus) return;

    const file = state.uploadedFiles.find(f => f.id === state.currentEditingFileId);
    const filename = file ? file.filename : 'Unknown File';

    summaryModalFilename.textContent = filename;
    summaryTextarea.value = state.summaryContent;
    summaryTextarea.placeholder = state.isLoading ? "Loading or generating summary..." : "Enter or edit summary here.";
    saveSummaryButton.disabled = state.isLoading || state.currentEditingFileId === null;

    if (state.isLoading && state.statusMessage.includes("Fetching Summary")) {
         summaryStatus.textContent = "Fetching...";
         summaryStatus.classList.remove('text-red-500');
    } else if (state.isLoading && state.statusMessage.includes("Saving Summary")) {
         summaryStatus.textContent = "Saving...";
         summaryStatus.classList.remove('text-red-500');
    } else if (state.isErrorStatus && state.statusMessage.includes("summary")) {
         summaryStatus.textContent = `Error: ${state.statusMessage}`;
         summaryStatus.classList.add('text-red-500');
    } else if (state.summaryContent.startsWith("[Error") || state.summaryContent.startsWith("[Summary not applicable")) {
         summaryStatus.textContent = state.summaryContent;
         summaryStatus.classList.add('text-red-500');
         saveSummaryButton.disabled = state.summaryContent.startsWith("[Summary not applicable");
    }
    else {
         summaryStatus.textContent = "Summary loaded. You can edit and save changes.";
         summaryStatus.classList.remove('text-red-500');
    }
}


/**
 * Renders the list of currently attached files and the session file below the message input.
 */
export function renderAttachedAndSessionFiles() {
    const { selectedFilesContainer, fileUploadSessionInput } = elements;
    if (!selectedFilesContainer) return;

    selectedFilesContainer.innerHTML = ''; // Clear current display

    const filesToDisplay = [];
    if (state.sessionFile) {
        filesToDisplay.push({
            id: 'session',
            filename: state.sessionFile.filename || state.sessionFile.name,
            type: 'session',
            mimetype: state.sessionFile.mimetype || state.sessionFile.type,
        });
    }
    state.attachedFiles.forEach(file => {
        filesToDisplay.push({
            id: file.id,
            filename: file.filename,
            type: file.type,
            mimetype: file.mimetype,
        });
    });


    if (filesToDisplay.length === 0) {
        selectedFilesContainer.classList.add('hidden');
        if (!state.sessionFile && fileUploadSessionInput) {
             fileUploadSessionInput.value = '';
        }
        return;
    }

    selectedFilesContainer.classList.remove('hidden');

    filesToDisplay.forEach(file => {
        const fileTag = document.createElement('span');
        fileTag.classList.add('selected-file-tag', 'inline-flex', 'items-center', 'text-xs', 'font-medium', 'px-2.5', 'py-0.5', 'rounded-full', 'mr-2', 'mb-1');
        fileTag.dataset.fileId = file.id;
        fileTag.dataset.fileType = file.type;

        if (file.type === 'session') {
             fileTag.classList.add('bg-rz-tag-bg', 'text-rz-tag-text', 'border', 'border-rz-tag-border');
        } else {
             fileTag.classList.add('bg-rz-button-primary-bg', 'text-rz-button-primary-text');
        }

        const filenameSpan = document.createElement('span');
        filenameSpan.textContent = escapeHtml(file.filename);
        filenameSpan.classList.add('mr-1');

        const typeSpan = document.createElement('span');
        typeSpan.classList.add('file-type');
        let typeText = 'File';
        if (file.type === 'full') typeText = 'Full';
        else if (file.type === 'summary') typeText = 'Summary';
        else if (file.type === 'session') typeText = 'Session';
        typeSpan.textContent = typeText;
        filenameSpan.prepend(typeSpan);


        const removeButton = document.createElement('button');
        removeButton.classList.add('remove-file-btn', 'ml-1');
        removeButton.innerHTML = '<i class="fas fa-times-circle"></i>';
        removeButton.title = `Remove ${file.type === 'session' ? 'session' : 'attached'} file`;
        removeButton.addEventListener('click', () => {
            if (file.type === 'session') {
                state.setSessionFile(null);
                if (elements.fileUploadSessionInput) {
                    elements.fileUploadSessionInput.value = '';
                }
            } else {
                state.removeAttachedFileByIdAndType(parseInt(file.id), file.type);
            }
        });

        fileTag.appendChild(filenameSpan);
        fileTag.appendChild(removeButton);
        selectedFilesContainer.appendChild(fileTag);
    });
}


/**
 * Shows a modal window.
 * @param {HTMLElement} modalElement - The modal element to show.
 * @param {string} [requiredPlugin=null] - Optional plugin key ('files', 'calendar', etc.) required to show the modal.
 * @param {string} [requiredTab=null] - Optional tab key ('chat', 'notes') required to show the modal.
 * @returns {boolean} True if the modal was shown, false otherwise.
 */
export function showModal(modalElement, requiredPlugin = null, requiredTab = null) {

    if (!modalElement) {
        console.error("Modal element not found.");
        return false;
    }

    if (requiredPlugin) {
        let pluginEnabled = false;
        if (requiredPlugin === 'files') pluginEnabled = true;
        else if (requiredPlugin === 'calendar' && state.isCalendarPluginEnabled) pluginEnabled = true;
        if (!pluginEnabled) return false;
    }

    if (requiredTab && state.currentTab !== requiredTab) return false;


    modalElement.classList.add('show');
    if (elements.bodyElement) elements.bodyElement.classList.add('modal-open');
    return true;
}


/**
 * Toggles the collapsed state of a sidebar.
 * @param {HTMLElement} sidebarElement - The sidebar element.
 * @param {HTMLElement} toggleButton - The button that toggles the sidebar.
 * @param {boolean} isCollapsed - The desired state (true for collapsed).
 * @param {string} localStorageKey - The key to use for localStorage.
 * @param {'sidebar' | 'plugins'} type - The type of sidebar ('sidebar' or 'plugins').
 */
export function setSidebarCollapsed(sidebarElement, toggleButton, isCollapsed, localStorageKey, type) {
    if (!sidebarElement || !toggleButton) return;
    localStorage.setItem(localStorageKey, isCollapsed);
    if (type === 'sidebar') state.setIsSidebarCollapsed(isCollapsed);
    else if (type === 'plugins') state.setIsPluginsCollapsed(isCollapsed);
}


/** Toggles the left sidebar (chat/notes list). */
export function toggleLeftSidebar() {
    const sidebarElement = document.getElementById('sidebar');
    const toggleButton = document.getElementById('sidebar-toggle-tab');
    if (!sidebarElement || !toggleButton) return;
    setSidebarCollapsed(sidebarElement, toggleButton, !sidebarElement.classList.contains('collapsed'), config.SIDEBAR_COLLAPSED_KEY, 'sidebar');
}

/** Toggles the right sidebar (plugins). */
export function toggleRightSidebar() {
    const sidebarElement = document.getElementById('plugins-sidebar');
    const toggleButton = document.getElementById('plugins-toggle-tab');
    if (!sidebarElement || !toggleButton) return;
    setSidebarCollapsed(sidebarElement, toggleButton, !sidebarElement.classList.contains('collapsed'), config.PLUGINS_COLLAPSED_KEY, 'plugins');
}

/** Toggles the File Plugin section. */
export function toggleFilePlugin() {
    if (!elements.filePluginHeader || !elements.filePluginContent) return;
    const isCollapsed = elements.filePluginContent.classList.contains('hidden');
    setPluginSectionCollapsed(elements.filePluginHeader, elements.filePluginContent, !isCollapsed, config.FILE_PLUGIN_COLLAPSED_KEY);
}

/** Toggles the Calendar Plugin section. */
export function toggleCalendarPlugin() {
    if (!elements.calendarPluginHeader || !elements.calendarPluginContent) return;
    const isCollapsed = elements.calendarPluginContent.classList.contains('hidden');
    setPluginSectionCollapsed(elements.calendarPluginHeader, elements.calendarPluginContent, !isCollapsed, config.CALENDAR_PLUGIN_COLLAPSED_KEY);
}

/** Toggles the History Plugin section. */
export function toggleHistoryPlugin() {
    if (!elements.historyPluginHeader || !elements.historyPluginContent) return;
    const isCollapsed = elements.historyPluginContent.classList.contains('hidden');
    setPluginSectionCollapsed(elements.historyPluginHeader, elements.historyPluginContent, !isCollapsed, config.HISTORY_PLUGIN_COLLAPSED_KEY);
}


/**
 * Sets the collapsed state of a plugin section within the plugins sidebar.
 * @param {HTMLElement} headerElement - The header element of the plugin section.
 * @param {HTMLElement} contentElement - The content element of the plugin section.
 * @param {boolean} isCollapsed - The desired state (true for collapsed).
 * @param {string} localStorageKey - The key to use for localStorage.
 */
export function setPluginSectionCollapsed(headerElement, contentElement, isCollapsed, localStorageKey) {
     if (!headerElement || !contentElement) return;

     const toggleIcon = headerElement.querySelector('.toggle-icon');

     if (isCollapsed) {
         contentElement.classList.add('hidden');
         headerElement.classList.add('collapsed');
         if (toggleIcon) toggleIcon.classList.replace('fa-chevron-down', 'fa-chevron-right');
     } else {
         contentElement.classList.remove('hidden');
         headerElement.classList.remove('collapsed');
         if (toggleIcon) toggleIcon.classList.replace('fa-chevron-right', 'fa-chevron-down');
     }
     localStorage.setItem(localStorageKey, isCollapsed);
}


/**
 * Updates the microphone button icons and styles based on recording state and active tab.
 */
export function renderMicButtonState() {
    const { micButton, micButtonNotes } = elements;
    const isRecording = state.isRecording;
    const activeTab = state.currentTab;
    const targetButton = activeTab === 'chat' ? micButton : (activeTab === 'notes' ? micButtonNotes : null);
    const otherButton = activeTab === 'chat' ? micButtonNotes : (activeTab === 'notes' ? micButton : null);

    if (otherButton) {
        otherButton.disabled = true;
        const otherIcon = otherButton.querySelector('i');
        if (otherIcon) {
             otherIcon.classList.remove('fa-stop', 'recording');
             otherIcon.classList.add('fa-microphone');
        }
    }

    if (!targetButton) return;

    const iconWrapper = targetButton.querySelector('.mic-icon-wrapper');
    const progressRing = targetButton.querySelector('.mic-progress-ring');

    if (isRecording) {
        targetButton.title = "Stop Recording";
        targetButton.classList.add('recording');
        const iconElement = iconWrapper?.querySelector('i');
        if (iconElement) {
            iconElement.classList.remove('fa-microphone');
            iconElement.classList.add('fa-stop');
            if (iconWrapper) iconWrapper.style.display = 'inline-block';
        }

    } else {
        targetButton.title = activeTab === 'chat' ? "Record Voice" : "Record Voice into Note";
        targetButton.classList.remove('recording');
         const iconElement = iconWrapper?.querySelector('i');
         if (iconElement) {
            iconElement.classList.remove('fa-stop');
            iconElement.classList.add('fa-microphone');
            if (iconWrapper) iconWrapper.style.display = 'inline-block';
         }
    }

    targetButton.disabled = state.isLoading;

    if (!isRecording && !state.isSocketConnected && !targetButton.disabled) {
        targetButton.title += " (Service Disconnected)";
        targetButton.classList.add('disconnected-cue');
    } else if (!isRecording) {
        targetButton.classList.remove('disconnected-cue');
    }
}


/**
 * Updates the UI based on which plugins are enabled/disabled (reads from state).
 */
export function updatePluginUI() {

    if (!elements.filePluginSection || !elements.fileUploadSessionLabel || !elements.selectedFilesContainer ||
        !elements.calendarPluginSection || !elements.calendarToggle || !elements.webSearchToggleLabel ||
        !elements.uploadedFilesList || !elements.manageFilesList || !elements.calendarStatus ||
        !elements.viewCalendarButton || !elements.webSearchToggle || !elements.historyPluginSection || !elements.noteHistoryList ||
        !elements.pluginsSidebar || !elements.pluginsToggleTab) {
        console.warn("Missing core plugin elements for updatePluginUI.");
        return;
    }
    const activeTab = state.currentTab;
    const showFilesPlugin = activeTab === 'chat';
    elements.filePluginSection.classList.toggle('hidden', !showFilesPlugin);
    const showCalendarPlugin = activeTab === 'chat';
    elements.calendarPluginSection.classList.toggle('hidden', !showCalendarPlugin);
    const showHistoryPlugin = activeTab === 'notes';
    elements.historyPluginSection.classList.toggle('hidden', !showHistoryPlugin);

    if (showFilesPlugin) {
        renderUploadedFiles();
    } else {
         if (elements.uploadedFilesList) elements.uploadedFilesList.innerHTML = `<p class="text-rz-sidebar-text opacity-75 text-sm p-1">Switch to Chat tab to use Files plugin.</p>`;
         if (elements.manageFilesList) elements.manageFilesList.innerHTML = `<p class="text-gray-500 text-xs p-1">Switch to Chat tab to use Files plugin.</p>`;
         renderAttachedAndSessionFiles();
         updateAttachButtonState();
    }
     if (showCalendarPlugin) {
        updateCalendarStatus();
     } else {
         if (elements.calendarStatus) elements.calendarStatus.textContent = `Status: Switch to Chat tab to use Calendar plugin.`;
         if (elements.viewCalendarButton) elements.viewCalendarButton.classList.add('hidden');
         if (elements.calendarToggle) elements.calendarToggle.checked = false;
     }
    if (showHistoryPlugin) {
        renderNoteHistory();
        updateTocVisibility();
    } else {
        if (elements.noteHistoryList) elements.noteHistoryList.innerHTML = `<p class="text-rz-sidebar-text opacity-75 text-xs p-1">Switch to Notes tab to view history.</p>`;
        updateTocVisibility();
    }
    const anyPluginSectionVisible = showFilesPlugin || showCalendarPlugin || showHistoryPlugin;
    if (elements.pluginsSidebar) elements.pluginsSidebar.classList.toggle('hidden', !anyPluginSectionVisible);
    if (elements.pluginsToggleTab) elements.pluginsToggleTab.classList.toggle('hidden', !anyPluginSectionVisible);
    renderChatInputArea();
}

/**
 * Updates the calendar status text and view button visibility (reads from state).
 */
export function updateCalendarStatus() {
    const { calendarStatus, viewCalendarButton, calendarToggle } = elements;
    if (!calendarStatus || !viewCalendarButton || !calendarToggle) {
        return;
    }

    const context = state.calendarContext;
    const isActive = state.isCalendarContextActive;
    calendarToggle.disabled = false;

    if (context) {
        const eventCount = context.events ? context.events.length : 0;
        calendarStatus.textContent = `Status: Loaded ${eventCount} events (last updated: ${new Date(context.timestamp).toLocaleTimeString()})`;
        viewCalendarButton.classList.remove('hidden');
        calendarToggle.checked = isActive;
    } else {
        calendarStatus.textContent = "Status: Not loaded";
        viewCalendarButton.classList.add('hidden');
        calendarToggle.checked = false;
    }
}

/**
 * Renders the chat input area elements based on plugin states.
 */
export function renderChatInputArea() {
    const {
        fileUploadSessionLabel, webSearchToggleLabel, webSearchToggle, calendarToggle,
        deepResearchToggleLabel, deepResearchToggle, improvePromptToggleLabel, improvePromptToggle
    } = elements;

    if (fileUploadSessionLabel) fileUploadSessionLabel.classList.toggle('hidden', false);
    if (calendarToggle) calendarToggle.checked = state.isCalendarContextActive;
    if (webSearchToggleLabel) webSearchToggleLabel.classList.toggle('hidden', false);
    if (webSearchToggle) webSearchToggle.checked = state.isWebSearchEnabled;
    if (deepResearchToggleLabel) deepResearchToggleLabel.classList.toggle('hidden', false);
    if (deepResearchToggle) deepResearchToggle.checked = state.isDeepResearchEnabled;
    if (improvePromptToggleLabel) improvePromptToggleLabel.classList.toggle('hidden', false);
    if (improvePromptToggle) improvePromptToggle.checked = state.isImprovePromptEnabled;
}


/**
 * Switches between the Chat and Notes tabs (updates UI visibility).
 * @param {'chat' | 'notes'} tab - The desired tab ('chat' or 'notes').
 */
export function switchTab(tab) {
    const {
        chatNavButton, notesNavButton, chatSection, notesSection,
        chatSidebarContent, notesSidebarContent, modelSelectorContainer,
        notesModeElements, inputArea
    } = elements;

    if (!chatNavButton || !notesNavButton || !chatSection || !notesSection ||
        !chatSidebarContent || !notesSidebarContent || !modelSelectorContainer ||
        !notesModeElements || !inputArea ) {
        console.error("Missing elements for tab switching.");
        return;
    }

    chatNavButton.classList.toggle('active', tab === 'chat');
    notesNavButton.classList.toggle('active', tab === 'notes');
    if (chatSection) chatSection.classList.toggle('hidden', tab !== 'chat');
    if (notesSection) notesSection.classList.toggle('hidden', tab !== 'notes');
    if (chatSidebarContent) chatSidebarContent.classList.toggle('hidden', tab !== 'chat');
    if (notesSidebarContent) notesSidebarContent.classList.toggle('hidden', tab !== 'notes');
    if (modelSelectorContainer) modelSelectorContainer.classList.toggle('hidden', tab === 'notes');
    if (notesModeElements) notesModeElements.classList.toggle('hidden', tab === 'chat');
    if (inputArea) inputArea.classList.toggle('hidden', tab !== 'chat');

    renderCurrentChatDetails();
    renderCurrentNoteDetails();

    if (tab === 'chat') {
        renderChatHistory();
    } else {
        renderNoteContent();
        setNoteMode(state.currentNoteMode);
    }
    updatePluginUI();
    updateNotesCleanupButtonState();
    updateChatCleanupButtonState();
}

/**
 * Sets the display mode for the notes section (edit or view) based on state.
 * @param {'edit' | 'view'} mode - The desired mode.
 */
export function setNoteMode(mode) {
    const { notesTextarea, notesPreview, editNoteButton, viewNoteButton, notesMicButtonGroup } = elements;
    if (!notesTextarea || !notesPreview || !editNoteButton || !viewNoteButton || !notesMicButtonGroup) {
        console.error("Missing elements for note mode switching.");
        return;
    }
    console.log(`[DEBUG] setNoteMode called with mode: '${mode}'. notesMicButtonGroup exists: ${!!notesMicButtonGroup}`);
    if (state.currentNoteMode === 'edit') {
        notesTextarea.classList.remove('hidden');
        notesPreview.classList.add('hidden');
        console.log("[DEBUG] setNoteMode: Setting to EDIT mode. Removing 'hidden' from notesMicButtonGroup.");
        editNoteButton.classList.add('active');
        viewNoteButton.classList.remove('active');
        notesMicButtonGroup.classList.remove('hidden');
        
        _currentNoteH1Sections = [];
        notesPreview.innerHTML = '';
        notesPreview.classList.remove('prose', 'prose-sm', 'max-w-none');
        autoResizeTextarea(notesTextarea);
        generateAndRenderToc(state.noteContent || '');
    } else {
        notesTextarea.classList.add('hidden');
        notesPreview.classList.remove('hidden');
        console.log("[DEBUG] setNoteMode: Setting to VIEW mode. Adding 'hidden' to notesMicButtonGroup.");
        notesMicButtonGroup.classList.add('hidden');
        editNoteButton.classList.remove('active');
        viewNoteButton.classList.add('active');
        updateNotesPreview();
    }
}


function _parseNoteIntoH1Sections(markdown) {
    if (!markdown || markdown.trim() === '') {
        return [{ title: "Note", rawMarkdownContent: markdown, isOnlySection: true, isFallback: true }];
    }

    const tokens = marked.lexer(markdown);
    const sections = [];
    let currentSectionTokens = [];
    let currentH1Title = null;

    const firstH1TokenIndex = tokens.findIndex(token => token.type === 'heading' && token.depth === 1);

    if (firstH1TokenIndex === -1) {
        return [{ title: "Note", rawMarkdownContent: markdown, isOnlySection: true, isFallback: true }];
    }

    if (firstH1TokenIndex > 0) {
        const preH1ContentTokens = tokens.slice(0, firstH1TokenIndex);
        if (preH1ContentTokens.some(t => t.raw.trim() !== '')) {
             sections.push({
                title: "Overview",
                rawMarkdownContent: preH1ContentTokens.map(t => t.raw).join(''),
                isPreH1Content: true
            });
        }
    }
    const processTokens = tokens.slice(firstH1TokenIndex);

    processTokens.forEach(token => {
        if (token.type === 'heading' && token.depth === 1) {
            if (currentSectionTokens.length > 0 && currentH1Title) {
                sections.push({
                    title: currentH1Title,
                    rawMarkdownContent: currentSectionTokens.map(t => t.raw).join('')
                });
            }
            currentH1Title = token.text;
            currentSectionTokens = [token];
        } else if (currentH1Title) {
            currentSectionTokens.push(token);
        }
    });
    if (currentSectionTokens.length > 0 && currentH1Title) {
        sections.push({
            title: currentH1Title,
            rawMarkdownContent: currentSectionTokens.map(t => t.raw).join('')
        });
    }
    
    if (sections.length === 0 && markdown.trim().length > 0) {
        return [{ title: "Note", rawMarkdownContent: markdown, isOnlySection: true, isFallback: true }];
    }
    
    sections.forEach(s => s.isFallback = false);

    if (sections.length === 1 && !sections[0].isPreH1Content) {
        sections[0].isOnlySection = true; 
    } else if (sections.length > 0) {
        sections.forEach(s => s.isOnlySection = false);
    }

    return sections;
}

export function updateNotesPreview() {
    const { notesTextarea, notesPreview } = elements;
    if (!notesTextarea || !notesPreview) return;
    let showTabs = false;
    _currentNoteH1Sections = _parseNoteIntoH1Sections(state.noteContent || '');

    if (state.currentNoteMode === 'view') {
        notesPreview.innerHTML = '';
        notesPreview.classList.remove('prose', 'prose-sm', 'max-w-none');
        showTabs = _currentNoteH1Sections.length > 0 && !(_currentNoteH1Sections.length === 1 && _currentNoteH1Sections[0].isFallback === true);

        if (showTabs) {
            const tabsContainer = document.createElement('div');
            tabsContainer.id = 'note-h1-tabs-container';
            tabsContainer.className = 'note-h1-tabs';
            _currentNoteH1Sections.forEach((section, index) => {
                const tabButton = document.createElement('button');
                tabButton.className = 'note-h1-tab';
                tabButton.textContent = section.title || `Section ${index + 1}`;
                tabButton.dataset.sectionIndex = index;
                if (index === state.currentNoteActiveH1SectionIndex) tabButton.classList.add('active');
                tabButton.addEventListener('click', () => state.setCurrentNoteActiveH1SectionIndex(index));
                tabsContainer.appendChild(tabButton);
            });
            notesPreview.appendChild(tabsContainer);
            const contentContainer = document.createElement('div');
            contentContainer.id = 'note-h1-content-container';
            contentContainer.className = 'note-h1-content prose prose-sm max-w-none';
            notesPreview.appendChild(contentContainer);
            _renderActiveH1SectionUI();
        } else {
            if (typeof marked !== 'undefined') {
                const rawHtml = marked.parse(state.noteContent || '', { renderer: markedRenderer });
                notesPreview.innerHTML = rawHtml;
                notesPreview.classList.add('prose', 'prose-sm', 'max-w-none');
                waitForGraphViewerAndProcess();
                generateAndRenderToc(state.noteContent || '');
            } else {
                notesPreview.textContent = state.noteContent || '';
            }
        }
    }
    if (state.currentNoteMode === 'edit' || (state.currentNoteMode === 'view' && !showTabs)) {
        const debouncedUpdateToc = debounce(() => {
            if (state.currentTab === 'notes') generateAndRenderToc(state.noteContent || '');
        }, 300);
        debouncedUpdateToc();
    }
}

function _renderActiveH1SectionUI() {
    const showTabs = _currentNoteH1Sections.length > 0 && !(_currentNoteH1Sections.length === 1 && _currentNoteH1Sections[0].isFallback === true);
    if (state.currentNoteMode !== 'view' || !showTabs) return;

    const activeIndex = state.currentNoteActiveH1SectionIndex;
    const section = _currentNoteH1Sections[activeIndex];
    if (!section) return;

    const contentContainer = document.getElementById('note-h1-content-container');
    if (!contentContainer) return;
    contentContainer.innerHTML = '';

    if (typeof marked !== 'undefined') {
        const rawHtml = marked.parse(section.rawMarkdownContent || '', { renderer: markedRenderer });
        const collapsibleFragment = makeHeadingsCollapsible(rawHtml);
        contentContainer.appendChild(collapsibleFragment);
        waitForGraphViewerAndProcess();
        generateAndRenderToc(section.rawMarkdownContent || '');
    } else {
        contentContainer.textContent = section.rawMarkdownContent || '';
    }

    const tabsContainer = document.getElementById('note-h1-tabs-container');
    if (tabsContainer) {
        tabsContainer.querySelectorAll('.note-h1-tab').forEach(tab => {
            tab.classList.remove('active');
            if (parseInt(tab.dataset.sectionIndex) === activeIndex) tab.classList.add('active');
        });
    }
}

export function renderNoteHistory() {
    const { noteHistoryList } = elements;
    if (!noteHistoryList) return;
    noteHistoryList.innerHTML = '';
    const history = state.noteHistory;
    const currentNoteId = state.currentNoteId;

    if (currentNoteId === null) {
         noteHistoryList.innerHTML = '<p class="text-rz-sidebar-text opacity-75 text-xs p-1">Select a note to view history.</p>';
         return;
    }
    if (!history || history.length === 0) {
        noteHistoryList.innerHTML = '<p class="text-rz-sidebar-text opacity-75 text-xs p-1">No save history for this note.</p>';
        return;
    }

    history.forEach((entry, index) => {
        const listItem = document.createElement('div');
        listItem.classList.add('list-item', 'history-list-item', 'p-2', 'border-rz-sidebar-border', 'cursor-pointer', 'hover:bg-rz-sidebar-hover');
        listItem.dataset.historyId = entry.id;
        const headerDiv = document.createElement('div');
        headerDiv.classList.add('flex', 'justify-between', 'items-center');
        const nameSpan = document.createElement('span');
        nameSpan.classList.add('text-rz-sidebar-text', 'text-sm', 'truncate', 'flex-grow');
        nameSpan.textContent = entry.name || state.currentNoteName || 'Untitled';
        headerDiv.appendChild(nameSpan);
        const timestampDiv = document.createElement('div');
        timestampDiv.classList.add('text-rz-sidebar-text', 'opacity-75', 'text-xs', 'ml-2', 'flex-shrink-0');
        timestampDiv.textContent = new Date(entry.saved_at).toLocaleString();
        listItem.appendChild(headerDiv);
        listItem.appendChild(timestampDiv);
        const diffDiv = document.createElement('div');
        diffDiv.classList.add('text-xs', 'mt-1', 'text-rz-sidebar-text', 'opacity-80', 'note-diff-summary', 'line-clamp-2');
        const isInitialVersion = index === history.length - 1;
        let summaryText = "";
        let summaryTitle = "";
        if (isInitialVersion) {
            summaryText = "Initial version";
            summaryTitle = "Initial version of the note.";
        } else if (entry.note_diff) {
            summaryText = entry.note_diff;
            summaryTitle = entry.note_diff;
            if (summaryText === "[Metadata change only]") {
                 summaryText = "Name/Metadata changed";
                 summaryTitle = "Only the note name or other metadata changed in this version.";
            } else if (summaryText.startsWith("[AI summary generation failed]") || summaryText.startsWith("[Summary generation error]")) {
                 summaryText = "Summary unavailable";
                 summaryTitle = "Could not generate summary for this version.";
                 diffDiv.classList.add('text-red-400');
            }
        } else {
            summaryText = "Summary pending...";
            summaryTitle = "Summary is being generated or was not created.";
            diffDiv.classList.add('opacity-60');
        }
        diffDiv.textContent = summaryText;
        diffDiv.title = summaryTitle;
        listItem.appendChild(diffDiv);
        noteHistoryList.appendChild(listItem);
    });
}

export function openModal(modalElement) {
    if (modalElement) {
        modalElement.classList.add('show');
        if (elements.bodyElement) elements.bodyElement.classList.add('modal-open');
    }
}

export function closeModal(modalElement) {
    if (modalElement) {
        modalElement.classList.remove('show');
        const anyModalOpen = document.querySelectorAll('.modal.show').length > 0;
        if (!anyModalOpen && elements.bodyElement) elements.bodyElement.classList.remove('modal-open');
        console.log(`[DEBUG] Modal closed: ${modalElement.id}`);
    }
}

export function handleStateChange_isLoading() {
    updateLoadingState();
    renderNoteContent();
    renderMicButtonState();
    updateNotesCleanupButtonState();
    updateChatCleanupButtonState();
    updateChatListProcessingIndicator();
}

export function handleStateChange_statusMessage() {
    renderStatus();
}
 
export function handleStateChange_savedChats() {
    renderSavedChats();
    updateChatListProcessingIndicator();
}
 
export function handleStateChange_currentChat() {
    renderCurrentChatDetails();
    updateActiveChatListItem();
}

export function handleStateChange_chatHistory() {
    renderChatHistory();
}

export function handleStateChange_isRecording() {
    renderMicButtonState();
}

export function handleStateChange_isSocketConnected() {
    renderMicButtonState();
}

export function handleStateChange_streamingTranscript() {
    renderStreamingTranscript();
}

export function handleStateChange_savedNotes() {
    renderSavedNotes();
}

export function handleStateChange_currentNote() {
    renderCurrentNoteDetails();
    updateActiveNoteListItem();
    renderNoteContent();
}

export function handleStateChange_noteContent() {
    renderNoteContent();
    if (state.currentTab === 'notes' && state.currentNoteMode === 'view') {
        updateNotesPreview();
    }
}

export function handleStateChange_uploadedFiles() {
    renderUploadedFiles();
}

export function handleStateChange_sidebarSelectedFiles() {
    updateSelectedFileListItemStyling();
    updateAttachButtonState();
}

export function handleStateChange_attachedFiles() {
    renderAttachedAndSessionFiles();
}

export function handleStateChange_sessionFile() {
    renderAttachedAndSessionFiles();
}

export function handleStateChange_currentEditingFileId() {
    renderSummaryModalContent();
}

export function handleStateChange_summaryContent() {
    renderSummaryModalContent();
}

export function handleStateChange_calendarContext() {
    updateCalendarStatus();
}

export function handleStateChange_isCalendarContextActive() {
    updateCalendarStatus();
    renderChatInputArea();
}

export function handleStateChange_isWebSearchEnabled() {
    renderChatInputArea();
}

export function handleStateChange_currentTab() {
    switchTab(state.currentTab);
}

export function handleStateChange_processingChatId() {
    updateLoadingState();
    updateChatListProcessingIndicator();
}

export function handleStateChange_currentNoteMode() {
    setNoteMode(state.currentNoteMode);
}

export function handleStateChange_isDeepResearchEnabled() {
    renderChatInputArea();
}

export function handleStateChange_isImprovePromptEnabled() {
    renderChatInputArea();
}

export function handleStateChange_noteHistory() {
    renderNoteHistory();
}

export function updateNotesCleanupButtonState() {
    if (!elements.notesTextarea || !elements.cleanupTranscriptButtonNotes) return;
    const hasSelection = elements.notesTextarea.selectionStart !== elements.notesTextarea.selectionEnd;
    elements.cleanupTranscriptButtonNotes.disabled = !(state.currentTab === 'notes' && !state.isLoading && hasSelection);
}

export function updateChatCleanupButtonState() {
    if (!elements.messageInput || !elements.cleanupTranscriptButton) return;
    const hasSelection = elements.messageInput.selectionStart !== elements.messageInput.selectionEnd;
    elements.cleanupTranscriptButton.disabled = !(state.currentTab === 'chat' && !state.isLoading && hasSelection);
}

export function renderStreamingTranscript() {
    const finalized = state.finalizedTranscript;
    const interim = state.currentInterimTranscript;
    const fullTranscript = finalized ? `${finalized} ${interim}` : interim;
    const context = state.recordingContext;
    const targetElement = getInputElementForContext(context);

    if (targetElement) {
        if (context === 'notes' && originalNoteTextBeforeRecording !== null) {
            targetElement.value = originalNoteTextBeforeRecording + (originalNoteTextBeforeRecording ? "\n\n" : "") + fullTranscript.trim();
        } else {
            targetElement.value = fullTranscript.trim();
        }
        autoResizeTextarea(targetElement);
    }
}

export function handleStateChange_isSidebarCollapsed() {
    const isCollapsed = state.isSidebarCollapsed;
    const sidebarElement = document.getElementById('sidebar');
    const toggleButton = document.getElementById('sidebar-toggle-tab');
    if (!sidebarElement || !toggleButton) return;
    sidebarElement.classList.toggle('collapsed', isCollapsed);
    toggleButton.classList.toggle('collapsed', isCollapsed);
    const icon = toggleButton.querySelector('i');
    if (icon) {
        icon.classList.toggle('fa-chevron-left', !isCollapsed);
        icon.classList.toggle('fa-chevron-right', isCollapsed);
    }
}

export function handleStateChange_isPluginsCollapsed() {
    const isCollapsed = state.isPluginsCollapsed;
    const sidebarElement = document.getElementById('plugins-sidebar');
    const toggleButton = document.getElementById('plugins-toggle-tab');
    if (!sidebarElement || !toggleButton) return;
    sidebarElement.classList.toggle('collapsed', isCollapsed);
    toggleButton.classList.toggle('collapsed', isCollapsed);
    const icon = toggleButton.querySelector('i');
    if (icon) {
        icon.classList.toggle('fa-chevron-right', !isCollapsed);
        icon.classList.toggle('fa-chevron-left', isCollapsed);
    }
}

function generateTocData(markdown) {
    if (!markdown) return [];
    const toc = [];
    const tokens = marked.lexer(markdown);
    tokens.forEach(token => {
        if (token.type === 'heading') {
            const level = token.depth;
            const text = token.text || `heading-${Date.now()}`;
            const slug = text.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
            const targetId = `toc-heading-level-${level}-${slug}`;
            toc.push({ level: level, text: token.text, targetId: targetId });
        }
    });
    return toc;
}

function renderTableOfContents(tocData) {
    const { notesTocList } = elements;
    if (!notesTocList) return;
    notesTocList.innerHTML = '';
    if (!tocData || tocData.length === 0) {
        notesTocList.innerHTML = '<p class="text-rz-sidebar-text opacity-75 text-xs p-1">No headings found.</p>';
        return;
    }
    tocData.forEach(item => {
        const link = document.createElement('a');
        link.href = `#${item.targetId}`;
        link.classList.add('toc-item', `toc-level-${item.level}`, 'toc-link');
        link.textContent = item.text;
        link.title = `Jump to: ${item.text}`;
        link.dataset.targetId = item.targetId;
        notesTocList.appendChild(link);
    });
}

export function generateAndRenderToc(customMarkdownContent = null) {
    if (state.currentTab === 'notes') {
        const markdownToParse = customMarkdownContent !== null ? customMarkdownContent : (state.noteContent || '');
        const tocData = generateTocData(markdownToParse);
        renderTableOfContents(tocData);
    }
}

export function updateTocVisibility() {
    const { notesTocDrawer } = elements;
    if (!notesTocDrawer) return;
    notesTocDrawer.classList.toggle('hidden', state.currentTab !== 'notes');
}

export function toggleNotesTocDrawer() {
    const { notesTocDrawer } = elements;
    if (!notesTocDrawer) return;
    state.setIsNotesTocCollapsed(!state.isNotesTocCollapsed);
}

export function setNotesTocCollapsedUI(isCollapsed) {
    const { notesTocHeader, notesTocList, notesTocToggle } = elements;
    if (!notesTocHeader || !notesTocList || !notesTocToggle) return;
    const icon = notesTocToggle.querySelector('.toc-toggle-icon');
    notesTocHeader.classList.toggle('collapsed', isCollapsed);
    notesTocList.classList.toggle('collapsed', isCollapsed);
    if (icon) {
        icon.classList.toggle('fa-chevron-up', !isCollapsed);
        icon.classList.toggle('fa-chevron-down', isCollapsed);
    }
    localStorage.setItem(config.NOTES_TOC_COLLAPSED_KEY, isCollapsed);
}

export function handleStateChange_isNotesTocCollapsed() {
    setNotesTocCollapsedUI(state.isNotesTocCollapsed);
}

export function handleStateChange_currentNoteActiveH1SectionIndex() {
    if (state.currentTab === 'notes' && state.currentNoteMode === 'view' && _currentNoteH1Sections.length > 1 && !_currentNoteH1Sections.every(s => s.isOnlySection)) {
        _renderActiveH1SectionUI();
    }
}

export function autoResizeTextarea(textareaElement) {
    if (!textareaElement) return;
    textareaElement.style.height = 'auto';
    textareaElement.style.height = `${textareaElement.scrollHeight}px`;
}
